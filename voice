<!DOCTYPE html>
<html lang="zh-Hant">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI 人聲學習與語音合成系統</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+TC:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Noto Sans TC', sans-serif;
        }
        .step-card {
            background-color: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-gray-900 text-white min-h-screen flex items-center justify-center p-4">
    <div class="w-full max-w-2xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-bold mb-2 bg-clip-text text-transparent bg-gradient-to-r from-blue-400 to-purple-500">AI 人聲學習與語音合成系統</h1>
            <p class="text-gray-400">一個從 YouTube 影片學習聲音並將文字轉換為語音的概念展示</p>
        </header>

        <main class="space-y-6">
            <!-- 步驟一：學習與建立聲音模型 -->
            <div class="step-card rounded-2xl p-6 shadow-lg">
                <div class="flex items-center mb-4">
                    <span class="bg-blue-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold text-lg mr-4">1</span>
                    <h2 class="text-2xl font-semibold">學習聲音模型</h2>
                </div>
                <p class="text-gray-400 mb-4">請提供一個 YouTube 影片的網址。系統將會（模擬）從中提取人聲並建立一個獨特的聲音模型。</p>
                <div class="flex flex-col sm:flex-row gap-3">
                    <input type="text" id="youtube-url" placeholder="https://www.youtube.com/watch?v=..." class="flex-grow bg-gray-800 border border-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 transition duration-300">
                    <button id="learn-voice-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition duration-300 flex items-center justify-center">
                        <span id="learn-btn-text">開始學習</span>
                        <div id="learn-loader" class="loader hidden ml-3"></div>
                    </button>
                </div>
                <div id="status-container" class="mt-4 text-gray-300 h-6"></div>
            </div>

            <!-- 步驟二：文字轉語音 -->
            <div id="tts-section" class="step-card rounded-2xl p-6 shadow-lg opacity-50 pointer-events-none">
                <div class="flex items-center mb-4">
                    <span class="bg-purple-500 text-white rounded-full w-8 h-8 flex items-center justify-center font-bold text-lg mr-4">2</span>
                    <h2 class="text-2xl font-semibold">文字轉語音 (TTS)</h2>
                </div>
                <p class="text-gray-400 mb-4">聲音模型準備就緒後，請在下方輸入您想轉換為語音的文字。</p>
                <textarea id="tts-text" rows="4" placeholder="在這裡輸入文字..." class="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500 transition duration-300"></textarea>
                
                <!-- New Voice Controls -->
                <div class="mt-4 space-y-4">
                    <div>
                        <label for="voice-select" class="block mb-2 text-sm font-medium text-gray-400">選擇聲音</label>
                        <select id="voice-select" class="w-full bg-gray-800 border border-gray-700 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500"></select>
                    </div>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div>
                            <label for="rate-slider" class="block mb-2 text-sm font-medium text-gray-400">語速: <span id="rate-value">1</span></label>
                            <input id="rate-slider" type="range" min="0.5" max="2" value="1" step="0.1" class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer">
                        </div>
                        <div>
                            <label for="pitch-slider" class="block mb-2 text-sm font-medium text-gray-400">音高: <span id="pitch-value">1</span></label>
                            <input id="pitch-slider" type="range" min="0" max="2" value="1" step="0.1" class="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer">
                        </div>
                    </div>
                </div>

                <div class="mt-4 flex flex-col sm:flex-row items-center justify-between gap-4">
                    <button id="generate-speech-btn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg transition duration-300 w-full sm:w-auto flex items-center justify-center">
                        <span id="generate-btn-text">生成語音</span>
                        <div id="generate-loader" class="loader hidden ml-3"></div>
                    </button>
                    <audio id="audio-output" controls class="w-full sm:w-auto"></audio>
                </div>
            </div>
        </main>
        
        <!-- 備註說明 -->
        <footer class="text-center mt-8 text-gray-500 text-sm">
            <p><strong>請注意：</strong>這是一個概念展示應用。為安全與版權考量，本頁面並未真正下載 YouTube 影片或使用真實的 AI 進行聲音克隆。所有後端處理皆為模擬，最終語音由瀏覽器內建語音合成功能產生。</p>
            <p class="mt-2">在真實世界中，這需要強大的後端伺服器、AI 語音模型 (如 ElevenLabs, Coqui TTS) 以及對 YouTube 服務條款和版權法的遵守。</p>
        </footer>
    </div>

    <script>
        // --- DOM 元素獲取 ---
        const youtubeUrlInput = document.getElementById('youtube-url');
        const learnVoiceBtn = document.getElementById('learn-voice-btn');
        const learnBtnText = document.getElementById('learn-btn-text');
        const learnLoader = document.getElementById('learn-loader');
        const statusContainer = document.getElementById('status-container');
        
        const ttsSection = document.getElementById('tts-section');
        const ttsTextInput = document.getElementById('tts-text');
        const generateSpeechBtn = document.getElementById('generate-speech-btn');
        const generateBtnText = document.getElementById('generate-btn-text');
        const generateLoader = document.getElementById('generate-loader');
        const audioOutput = document.getElementById('audio-output');

        const voiceSelect = document.getElementById('voice-select');
        const rateSlider = document.getElementById('rate-slider');
        const rateValueSpan = document.getElementById('rate-value');
        const pitchSlider = document.getElementById('pitch-slider');
        const pitchValueSpan = document.getElementById('pitch-value');

        let voiceModelId = null; // 用來儲存（模擬的）聲音模型 ID

        // --- 核心功能函式 ---

        /**
         * 模擬後端處理：從 YouTube 下載音訊並進行聲音克隆
         * @param {string} url - YouTube 影片網址
         */
        async function learnVoiceFromYouTube(url) {
            if (!url.includes('youtube.com/') && !url.includes('youtu.be/')) {
                updateStatus('錯誤：請輸入有效的 YouTube 網址。', 'error');
                return;
            }

            // 1. UI 更新：開始處理
            setLearningState(true);
            updateStatus('步驟 1/3：正在從伺服器請求音訊...', 'loading');
            await delay(2000); // 模擬網路延遲與下載

            // 2. 模擬音訊分離
            updateStatus('步驟 2/3：正在分離人聲並進行前處理...', 'loading');
            await delay(3000); // 模擬 AI 處理時間

            // 3. 模擬聲音模型訓練
            updateStatus('步驟 3/3：正在建立聲音特徵模型...', 'loading');
            await delay(4000); // 模擬模型訓練時間

            // 4. 完成
            voiceModelId = `voice_${Date.now()}`; // 產生一個獨特的假模型 ID
            updateStatus(`成功！已建立聲音模型 (ID: ${voiceModelId})`, 'success');
            setLearningState(false);
            
            // 解鎖下一步
            ttsSection.classList.remove('opacity-50', 'pointer-events-none');
            ttsTextInput.focus();
        }

        /**
         * 模擬後端處理：使用聲音模型進行文字轉語音
         * @param {string} text - 要轉換的文字
         * @param {string} modelId - 使用的聲音模型 ID
         */
        async function generateSpeech(text, modelId) {
            if (!text.trim()) {
                alert('請輸入要轉換的文字。');
                return;
            }
            if (!modelId) {
                alert('錯誤：聲音模型尚未準備就緒。');
                return;
            }
            
            setGeneratingState(true);
            
            // --- 真實世界中的作法 ---
            // 在這裡，您會向您的後端 API 發送一個請求，例如：
            // const response = await fetch('/api/tts', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({ text: text, voiceId: modelId })
            // });
            // const audioBlob = await response.blob();
            // const audioUrl = URL.createObjectURL(audioBlob);
            // audioOutput.src = audioUrl;

            // --- 模擬與展示 ---
            // 為了展示，我們使用瀏覽器內建的 Web Speech API
            // 這不會使用克隆的聲音，但能實現文字轉語音的功能
            console.log(`模擬使用模型 ${modelId} 生成語音...`);
            await delay(1500); // 模擬 API 處理時間

            const utterance = new SpeechSynthesisUtterance(text);
            
            // 獲取選擇的聲音、語速和音高
            const selectedVoiceName = voiceSelect.selectedOptions[0].getAttribute('data-name');
            const voices = window.speechSynthesis.getVoices();
            utterance.voice = voices.find(voice => voice.name === selectedVoiceName);
            utterance.rate = parseFloat(rateSlider.value);
            utterance.pitch = parseFloat(pitchSlider.value);

            utterance.onend = () => {
                setGeneratingState(false);
            };
            
            window.speechSynthesis.speak(utterance);
            // 因為 Web Speech API 是直接播放而非回傳檔案，所以我們這裡不設定 audio.src
            // 在真正的應用中，您會將 API 回傳的音檔 URL 設定給 audioOutput.src
        }
        
        // 確保在頁面載入時能獲取語音列表
        function populateVoiceList() {
            const voices = speechSynthesis.getVoices();
            if (voices.length === 0) return; // 如果語音尚未載入則返回

            voiceSelect.innerHTML = '';
            
            // 優先顯示中文語音
            voices
                .filter(voice => voice.lang.includes('zh'))
                .forEach(voice => {
                    const option = document.createElement('option');
                    option.textContent = `${voice.name} (${voice.lang})`;
                    option.setAttribute('data-lang', voice.lang);
                    option.setAttribute('data-name', voice.name);
                    voiceSelect.appendChild(option);
                });
            
            // 附加其他語言的語音
            voices
                .filter(voice => !voice.lang.includes('zh'))
                .forEach(voice => {
                    const option = document.createElement('option');
                    option.textContent = `${voice.name} (${voice.lang})`;
                    option.setAttribute('data-lang', voice.lang);
                    option.setAttribute('data-name', voice.name);
                    voiceSelect.appendChild(option);
                });
        }
        
        populateVoiceList();
        if (speechSynthesis.onvoiceschanged !== undefined) {
            speechSynthesis.onvoiceschanged = populateVoiceList;
        }

        // --- UI 輔助函式 ---

        function setLearningState(isLoading) {
            learnVoiceBtn.disabled = isLoading;
            youtubeUrlInput.disabled = isLoading;
            learnLoader.classList.toggle('hidden', !isLoading);
            learnBtnText.innerText = isLoading ? '學習中...' : '開始學習';
        }

        function setGeneratingState(isGenerating) {
            generateSpeechBtn.disabled = isGenerating;
            ttsTextInput.disabled = isGenerating;
            generateLoader.classList.toggle('hidden', !isGenerating);
            generateBtnText.innerText = isGenerating ? '生成中...' : '生成語音';
        }

        function updateStatus(message, type = 'info') {
            statusContainer.innerHTML = ''; // 清空
            const p = document.createElement('p');
            p.textContent = message;
            
            switch (type) {
                case 'error':
                    p.className = 'text-red-400';
                    break;
                case 'success':
                    p.className = 'text-green-400';
                    break;
                case 'loading':
                    p.className = 'text-blue-300';
                    break;
                default:
                    p.className = 'text-gray-300';
            }
            statusContainer.appendChild(p);
        }

        function delay(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        // --- 事件監聽器 ---
        learnVoiceBtn.addEventListener('click', () => {
            learnVoiceFromYouTube(youtubeUrlInput.value);
        });

        generateSpeechBtn.addEventListener('click', () => {
            generateSpeech(ttsTextInput.value, voiceModelId);
        });

        rateSlider.addEventListener('input', () => {
            rateValueSpan.textContent = rateSlider.value;
        });

        pitchSlider.addEventListener('input', () => {
            pitchValueSpan.textContent = pitchSlider.value;
        });
    </script>
</body>
</html>
